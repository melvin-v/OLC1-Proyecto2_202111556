/* parser generated by jison 0.4.18 */
/*
  Returns a Parser object of the following structure:

  Parser: {
    yy: {}
  }

  Parser.prototype: {
    yy: {},
    trace: function(),
    symbols_: {associative list: name ==> number},
    terminals_: {associative list: number ==> name},
    productions_: [...],
    performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate, $$, _$),
    table: [...],
    defaultActions: {...},
    parseError: function(str, hash),
    parse: function(input),

    lexer: {
        EOF: 1,
        parseError: function(str, hash),
        setInput: function(input),
        input: function(),
        unput: function(str),
        more: function(),
        less: function(n),
        pastInput: function(),
        upcomingInput: function(),
        showPosition: function(),
        test_match: function(regex_match_array, rule_index),
        next: function(),
        lex: function(),
        begin: function(condition),
        popState: function(),
        _currentRules: function(),
        topState: function(),
        pushState: function(condition),

        options: {
            ranges: boolean           (optional: true ==> token location info will include a .range[] member)
            flex: boolean             (optional: true ==> flex-like lexing behaviour where the rules are tested exhaustively to find the longest match)
            backtrack_lexer: boolean  (optional: true ==> lexer regexes are tested in order and for each matching regex the action code is invoked; the lexer terminates the scan when a token is returned by the action code)
        },

        performAction: function(yy, yy_, $avoiding_name_collisions, YY_START),
        rules: [...],
        conditions: {associative list: name ==> set},
    }
  }


  token location info (@$, _$, etc.): {
    first_line: n,
    last_line: n,
    first_column: n,
    last_column: n,
    range: [start_number, end_number]       (where the numbers are indexes into the input string, regular zero-based)
  }


  the parseError function receives a 'hash' object with these members for lexer and parser errors: {
    text:        (matched text)
    token:       (the produced terminal token, if any)
    line:        (yylineno)
  }
  while parser (grammar) errors will also provide these members, i.e. parser errors deliver a superset of attributes: {
    loc:         (yylloc)
    expected:    (string describing the set of expected tokens)
    recoverable: (boolean: TRUE when the parser has a error recovery rule available for this particular error)
  }
*/
    // Importations
    import {Type, ArithmeticOperator, relationalOperator} from './tools/Type.js';
    import {Declare} from './instrucciones/Declare.js';
    import {Set} from './instrucciones/Set.js';
    import {Aritmetica} from './expresiones/Aritmetica.js';
    import {Relacional} from './expresiones/Relacional.js';
    import {Primitivo} from './expresiones/Primitivo.js';
    import {Identificador} from './expresiones/Identificador.js';
    import {Declaraciones} from './instrucciones/Declaraciones.js';
    import {DeclareNull} from './instrucciones/DeclareNull.js';
    import {CreateTable} from './instrucciones/CreateTable.js';
    import {Columna} from './instrucciones/Columna.js';
    import {AlterTable} from './instrucciones/AlterTable.js';
    import {AddColumn} from './instrucciones/AddColumn.js';
    import {DropColumn} from './instrucciones/DropColumn.js';
    import {RenameTable} from './instrucciones/RenameTable.js';
    import {RenameColumn} from './instrucciones/RenameColumn.js';
    import {DropTable} from './instrucciones/DropTable.js';
    import {Insert} from './instrucciones/Insert.js';
    import {Select} from './instrucciones/Select.js';
    import {SelectAll} from './instrucciones/SelectAll.js';
    import { Data } from "./data/Data";
export var grammar = (function(){
var o=function(k,v,o,l){for(o=o||{},l=k.length;l--;o[k[l]]=v);return o},$V0=[1,11],$V1=[1,4],$V2=[1,12],$V3=[1,13],$V4=[1,14],$V5=[1,15],$V6=[1,16],$V7=[1,17],$V8=[2,5,7,23,25,31,34,38,43],$V9=[1,22],$Va=[9,16],$Vb=[16,45],$Vc=[1,50],$Vd=[1,51],$Ve=[1,52],$Vf=[1,53],$Vg=[1,54],$Vh=[9,16,21,29],$Vi=[1,69],$Vj=[1,67],$Vk=[1,70],$Vl=[1,71],$Vm=[1,72],$Vn=[1,73],$Vo=[1,74],$Vp=[1,75],$Vq=[1,78],$Vr=[1,88],$Vs=[1,86],$Vt=[1,87],$Vu=[1,89],$Vv=[1,90],$Vw=[1,91],$Vx=[1,92],$Vy=[1,93],$Vz=[1,94],$VA=[1,95],$VB=[9,16,29,46,47,48,49,50,51,52,53,54,55],$VC=[16,29],$VD=[9,16,29,47,48,50,51,52,53,54,55],$VE=[9,16,29,50,51],$VF=[9,16,29,50,51,52,53,54,55];
var parser = {trace: function trace () { },
yy: {},
symbols_: {"error":2,"ini":3,"instructions":4,"EOF":5,"instruction":6,"DECLARE":7,"declaraciones":8,";":9,"set":10,"create_table":11,"alter_table":12,"drop":13,"insert":14,"select":15,",":16,"declaracion":17,"@":18,"TK_IDENTIFIER":19,"tipodato":20,"DEFAULT":21,"expression":22,"SET":23,"=":24,"CREATE":25,"TABLE":26,"(":27,"columns":28,")":29,"column":30,"ALTER":31,"accion_alter":32,"ADD":33,"DROP":34,"COLUMN":35,"RENAME":36,"TO":37,"INSERT":38,"INTO":39,"cabeceras":40,"VALUES":41,"valores":42,"SELECT":43,"seleciones":44,"FROM":45,"*":46,"+":47,"-":48,"/":49,"==":50,"!=":51,"<=":52,">=":53,"<":54,">":55,"exp":56,"TK_VALUE_VARCHAR":57,"TK_VALUE_INT":58,"TK_VALUE_BOOLEAN":59,"TK_VALUE_DOUBLE":60,"TK_VALUE_DATE":61,"TK_VALUE_NULL":62,"INT":63,"DOUBLE":64,"VARCHAR":65,"BOOLEAN":66,"DATE":67,"$accept":0,"$end":1},
terminals_: {2:"error",5:"EOF",7:"DECLARE",9:";",16:",",18:"@",19:"TK_IDENTIFIER",21:"DEFAULT",23:"SET",24:"=",25:"CREATE",26:"TABLE",27:"(",29:")",31:"ALTER",33:"ADD",34:"DROP",35:"COLUMN",36:"RENAME",37:"TO",38:"INSERT",39:"INTO",41:"VALUES",43:"SELECT",45:"FROM",46:"*",47:"+",48:"-",49:"/",50:"==",51:"!=",52:"<=",53:">=",54:"<",55:">",57:"TK_VALUE_VARCHAR",58:"TK_VALUE_INT",59:"TK_VALUE_BOOLEAN",60:"TK_VALUE_DOUBLE",61:"TK_VALUE_DATE",62:"TK_VALUE_NULL",63:"INT",64:"DOUBLE",65:"VARCHAR",66:"BOOLEAN",67:"DATE"},
productions_: [0,[3,2],[4,2],[4,1],[6,3],[6,2],[6,2],[6,2],[6,2],[6,2],[6,2],[6,1],[8,3],[8,1],[17,3],[17,5],[10,5],[11,6],[28,3],[28,1],[30,2],[12,4],[32,3],[32,3],[32,3],[32,5],[13,3],[14,10],[40,3],[40,1],[42,3],[42,1],[15,4],[15,4],[44,3],[44,1],[22,3],[22,3],[22,3],[22,3],[22,3],[22,3],[22,3],[22,3],[22,3],[22,3],[22,2],[22,1],[56,1],[56,1],[56,1],[56,1],[56,1],[56,1],[56,1],[20,1],[20,1],[20,1],[20,1],[20,1]],
performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate /* action[1] */, $$ /* vstack */, _$ /* lstack */) {
/* this == yyval */

var $0 = $$.length - 1;
switch (yystate) {
case 1:
 return $$[$0-1]; 
break;
case 2:
 $$[$0-1].push($$[$0]); this.$ = $$[$0-1]; 
break;
case 3:
 this.$ = $$[$0] === null ? [] : [$$[$0]]; 
break;
case 4:
 this.$ = new Declaraciones($$[$0-1], _$[$0-2].first_line, _$[$0-2].first_column); 
break;
case 5: case 6: case 7: case 8: case 9: case 10:
 this.$ = $$[$0-1]; 
break;
case 11:

          data.errores.push({ line: this._$.first_line, column: this._$.first_column, type: 'Sint치ctico', message: `Error sint치ctico, token no esperado '${yytext}' .`});
          console.log({ line: this._$.first_line, column: this._$.first_column, type: 'Sint치ctico', message: `Error sint치ctico, token no esperado '${yytext}' .`}); 
          
break;
case 12: case 18: case 28: case 30: case 34:
 $$[$0-2].push($$[$0]); this.$ = $$[$0-2]; 
break;
case 13: case 19: case 29: case 31: case 35:
 this.$ = [$$[$0]]; 
break;
case 14:
 this.$ = new DeclareNull($$[$0-1], $$[$0], _$[$0-2].first_line, _$[$0-2].first_column); 
break;
case 15:
 this.$ =  new Declare($$[$0-3], $$[$0-2], $$[$0], _$[$0-4].first_line, _$[$0-4].first_column); 
break;
case 16:
 this.$ = new Set($$[$0-2], $$[$0]); 
break;
case 17:
 this.$ = new CreateTable($$[$0-3], $$[$0-1], _$[$0-5].first_line, _$[$0-5].first_column);
break;
case 20:
 this.$ = new Columna($$[$0-1], $$[$0], _$[$0-1].first_line, _$[$0-1].first_column); 
break;
case 21:
 this.$ = new AlterTable($$[$0-1], $$[$0], _$[$0-3].first_line, _$[$0-3].first_column); 
break;
case 22:
 this.$ = new AddColumn($$[$0-1], $$[$0], _$[$0-2].first_line, _$[$0-2].first_column);
break;
case 23:
 this.$ = new DropColumn($$[$0], _$[$0-2].first_line, _$[$0-2].first_column); 
break;
case 24:
 this.$ = new RenameTable($$[$0], _$[$0-2].first_line, _$[$0-2].first_column); 
break;
case 25:
 this.$ = new RenameColumn($$[$0-2], $$[$0], _$[$0-4].first_line, _$[$0-4].first_column); 
break;
case 26:
 this.$ = new  DropTable($$[$0], _$[$0-2].first_line, _$[$0-2].first_column); 
break;
case 27:
 this.$ = new Insert($$[$0-7], $$[$0-5], $$[$0-1], _$[$0-9].first_line, _$[$0-9].first_column); 
break;
case 32:
 this.$ = new Select($$[$0-2], $$[$0], _$[$0-3].first_line, _$[$0-3].first_column); 
break;
case 33:
 this.$ = new SelectAll($$[$0], _$[$0-3].first_line, _$[$0-3].first_column); 
break;
case 36:
 this.$ = new Aritmetica($$[$0-2], $$[$0], ArithmeticOperator.PLUS, _$[$0-2].first_line, _$[$0-2].first_column); 
break;
case 37:
 this.$ = new Aritmetica($$[$0-2], $$[$0], ArithmeticOperator.MINUS, _$[$0-2].first_line, _$[$0-2].first_column); 
break;
case 38:
 this.$ = new Aritmetica($$[$0-2], $$[$0], ArithmeticOperator.MULT, _$[$0-2].first_line, _$[$0-2].first_column); 
break;
case 39:
 this.$ = new Aritmetica($$[$0-2], $$[$0], ArithmeticOperator.DIV, _$[$0-2].first_line, _$[$0-2].first_column); 
break;
case 40:
 this.$ = new Relacional($$[$0-2], $$[$0], relationalOperator.IGUAL, _$[$0-2].first_line, _$[$0-2].first_column); 
break;
case 41:
 this.$ = new Relacional($$[$0-2], $$[$0], relationalOperator.DIF, _$[$0-2].first_line, _$[$0-2].first_column); 
break;
case 42:
 this.$ = new Relacional($$[$0-2], $$[$0], relationalOperator.MENORIGUAL, _$[$0-2].first_line, _$[$0-2].first_column); 
break;
case 43:
 this.$ = new Relacional($$[$0-2], $$[$0], relationalOperator.MAYORIGUAL, _$[$0-2].first_line, _$[$0-2].first_column); 
break;
case 44:
 this.$ = new Relacional($$[$0-2], $$[$0], relationalOperator.MENOR, _$[$0-2].first_line, _$[$0-2].first_column); 
break;
case 45:
 this.$ = new Relacional($$[$0-2], $$[$0], relationalOperator.MAYOR, _$[$0-2].first_line, _$[$0-2].first_column); 
break;
case 46:
 this.$ = new Primitivo($$[$0], Type.NEGATIVE, _$[$0-1].first_line, _$[$0-1].first_column); 
break;
case 47:
 this.$ = $$[$0]; 
break;
case 48:
 this.$ = new Identificador($$[$0], _$[$0].first_line, _$[$0].first_column); 
break;
case 49:
 this.$ = new Primitivo($$[$0], Type.VARCHAR, _$[$0].first_line, _$[$0].first_column); 
break;
case 50:
 this.$ = new Primitivo($$[$0], Type.INT, _$[$0].first_line, _$[$0].first_column); 
break;
case 51:
 this.$ = new Primitivo($$[$0], Type.BOOLEAN, _$[$0].first_line, _$[$0].first_column); 
break;
case 52:
 this.$ = new Primitivo($$[$0], Type.DOUBLE, _$[$0].first_line, _$[$0].first_column); 
break;
case 53:
 this.$ = new Primitivo($$[$0], Type.DATE, _$[$0].first_line, _$[$0].first_column); 
break;
case 54:
 this.$ = new Primitivo($$[$0], Type.NULL, _$[$0].first_line, _$[$0].first_column); 
break;
case 55:
 this.$ = Type.INT; 
break;
case 56:
 this.$ = Type.DOUBLE; 
break;
case 57:
 this.$ = Type.VARCHAR; 
break;
case 58:
 this.$ = Type.BOOLEAN; 
break;
case 59:
 this.$ = Type.DATE; 
break;
}
},
table: [{2:$V0,3:1,4:2,6:3,7:$V1,10:5,11:6,12:7,13:8,14:9,15:10,23:$V2,25:$V3,31:$V4,34:$V5,38:$V6,43:$V7},{1:[3]},{2:$V0,5:[1,18],6:19,7:$V1,10:5,11:6,12:7,13:8,14:9,15:10,23:$V2,25:$V3,31:$V4,34:$V5,38:$V6,43:$V7},o($V8,[2,3]),{8:20,17:21,18:$V9},{9:[1,23]},{9:[1,24]},{9:[1,25]},{9:[1,26]},{9:[1,27]},{9:[1,28]},o($V8,[2,11]),{18:[1,29]},{26:[1,30]},{26:[1,31]},{26:[1,32]},{39:[1,33]},{19:[1,36],44:34,46:[1,35]},{1:[2,1]},o($V8,[2,2]),{9:[1,37],16:[1,38]},o($Va,[2,13]),{19:[1,39]},o($V8,[2,5]),o($V8,[2,6]),o($V8,[2,7]),o($V8,[2,8]),o($V8,[2,9]),o($V8,[2,10]),{19:[1,40]},{19:[1,41]},{19:[1,42]},{19:[1,43]},{19:[1,44]},{16:[1,46],45:[1,45]},{45:[1,47]},o($Vb,[2,35]),o($V8,[2,4]),{17:48,18:$V9},{20:49,63:$Vc,64:$Vd,65:$Ve,66:$Vf,67:$Vg},{24:[1,55]},{27:[1,56]},{32:57,33:[1,58],34:[1,59],36:[1,60]},{9:[2,26]},{27:[1,61]},{19:[1,62]},{19:[1,63]},{19:[1,64]},o($Va,[2,12]),o($Va,[2,14],{21:[1,65]}),o($Vh,[2,55]),o($Vh,[2,56]),o($Vh,[2,57]),o($Vh,[2,58]),o($Vh,[2,59]),{19:$Vi,22:66,48:$Vj,56:68,57:$Vk,58:$Vl,59:$Vm,60:$Vn,61:$Vo,62:$Vp},{19:$Vq,28:76,30:77},{9:[2,21]},{19:[1,79]},{35:[1,80]},{35:[1,82],37:[1,81]},{19:[1,84],40:83},{9:[2,32]},o($Vb,[2,34]),{9:[2,33]},{19:$Vi,22:85,48:$Vj,56:68,57:$Vk,58:$Vl,59:$Vm,60:$Vn,61:$Vo,62:$Vp},{9:[2,16],46:$Vr,47:$Vs,48:$Vt,49:$Vu,50:$Vv,51:$Vw,52:$Vx,53:$Vy,54:$Vz,55:$VA},{19:$Vi,56:96,57:$Vk,58:$Vl,59:$Vm,60:$Vn,61:$Vo,62:$Vp},o($VB,[2,47]),o($VB,[2,48]),o($VB,[2,49]),o($VB,[2,50]),o($VB,[2,51]),o($VB,[2,52]),o($VB,[2,53]),o($VB,[2,54]),{16:[1,98],29:[1,97]},o($VC,[2,19]),{20:99,63:$Vc,64:$Vd,65:$Ve,66:$Vf,67:$Vg},{20:100,63:$Vc,64:$Vd,65:$Ve,66:$Vf,67:$Vg},{19:[1,101]},{19:[1,102]},{19:[1,103]},{16:[1,105],29:[1,104]},o($VC,[2,29]),o($Va,[2,15],{46:$Vr,47:$Vs,48:$Vt,49:$Vu,50:$Vv,51:$Vw,52:$Vx,53:$Vy,54:$Vz,55:$VA}),{19:$Vi,22:106,48:$Vj,56:68,57:$Vk,58:$Vl,59:$Vm,60:$Vn,61:$Vo,62:$Vp},{19:$Vi,22:107,48:$Vj,56:68,57:$Vk,58:$Vl,59:$Vm,60:$Vn,61:$Vo,62:$Vp},{19:$Vi,22:108,48:$Vj,56:68,57:$Vk,58:$Vl,59:$Vm,60:$Vn,61:$Vo,62:$Vp},{19:$Vi,22:109,48:$Vj,56:68,57:$Vk,58:$Vl,59:$Vm,60:$Vn,61:$Vo,62:$Vp},{19:$Vi,22:110,48:$Vj,56:68,57:$Vk,58:$Vl,59:$Vm,60:$Vn,61:$Vo,62:$Vp},{19:$Vi,22:111,48:$Vj,56:68,57:$Vk,58:$Vl,59:$Vm,60:$Vn,61:$Vo,62:$Vp},{19:$Vi,22:112,48:$Vj,56:68,57:$Vk,58:$Vl,59:$Vm,60:$Vn,61:$Vo,62:$Vp},{19:$Vi,22:113,48:$Vj,56:68,57:$Vk,58:$Vl,59:$Vm,60:$Vn,61:$Vo,62:$Vp},{19:$Vi,22:114,48:$Vj,56:68,57:$Vk,58:$Vl,59:$Vm,60:$Vn,61:$Vo,62:$Vp},{19:$Vi,22:115,48:$Vj,56:68,57:$Vk,58:$Vl,59:$Vm,60:$Vn,61:$Vo,62:$Vp},o($VB,[2,46]),{9:[2,17]},{19:$Vq,30:116},o($VC,[2,20]),{9:[2,22]},{9:[2,23]},{9:[2,24]},{37:[1,117]},{41:[1,118]},{19:[1,119]},o($VD,[2,36],{46:$Vr,49:$Vu}),o($VD,[2,37],{46:$Vr,49:$Vu}),o($VB,[2,38]),o($VB,[2,39]),o($VE,[2,40],{46:$Vr,47:$Vs,48:$Vt,49:$Vu,52:$Vx,53:$Vy,54:$Vz,55:$VA}),o($VE,[2,41],{46:$Vr,47:$Vs,48:$Vt,49:$Vu,52:$Vx,53:$Vy,54:$Vz,55:$VA}),o($VF,[2,42],{46:$Vr,47:$Vs,48:$Vt,49:$Vu}),o($VF,[2,43],{46:$Vr,47:$Vs,48:$Vt,49:$Vu}),o($VF,[2,44],{46:$Vr,47:$Vs,48:$Vt,49:$Vu}),o($VF,[2,45],{46:$Vr,47:$Vs,48:$Vt,49:$Vu}),o($VC,[2,18]),{19:[1,120]},{27:[1,121]},o($VC,[2,28]),{9:[2,25]},{19:$Vi,22:123,42:122,48:$Vj,56:68,57:$Vk,58:$Vl,59:$Vm,60:$Vn,61:$Vo,62:$Vp},{16:[1,125],29:[1,124]},o($VC,[2,31],{46:$Vr,47:$Vs,48:$Vt,49:$Vu,50:$Vv,51:$Vw,52:$Vx,53:$Vy,54:$Vz,55:$VA}),{9:[2,27]},{19:$Vi,22:126,48:$Vj,56:68,57:$Vk,58:$Vl,59:$Vm,60:$Vn,61:$Vo,62:$Vp},o($VC,[2,30],{46:$Vr,47:$Vs,48:$Vt,49:$Vu,50:$Vv,51:$Vw,52:$Vx,53:$Vy,54:$Vz,55:$VA})],
defaultActions: {18:[2,1],43:[2,26],57:[2,21],62:[2,32],64:[2,33],97:[2,17],100:[2,22],101:[2,23],102:[2,24],120:[2,25],124:[2,27]},
parseError: function parseError (str, hash) {
    if (hash.recoverable) {
        this.trace(str);
    } else {
        var error = new Error(str);
        error.hash = hash;
        throw error;
    }
},
parse: function parse (input) {
    var self = this,
        stack = [0],
        tstack = [], // token stack
        vstack = [null], // semantic value stack
        lstack = [], // location stack
        table = this.table,
        yytext = '',
        yylineno = 0,
        yyleng = 0,
        recovering = 0,
        TERROR = 2,
        EOF = 1;

    var args = lstack.slice.call(arguments, 1);

    //this.reductionCount = this.shiftCount = 0;

    var lexer = Object.create(this.lexer);
    var sharedState = { yy: {} };
    // copy state
    for (var k in this.yy) {
      if (Object.prototype.hasOwnProperty.call(this.yy, k)) {
        sharedState.yy[k] = this.yy[k];
      }
    }

    lexer.setInput(input, sharedState.yy);
    sharedState.yy.lexer = lexer;
    sharedState.yy.parser = this;
    if (typeof lexer.yylloc == 'undefined') {
        lexer.yylloc = {};
    }
    var yyloc = lexer.yylloc;
    lstack.push(yyloc);

    var ranges = lexer.options && lexer.options.ranges;

    if (typeof sharedState.yy.parseError === 'function') {
        this.parseError = sharedState.yy.parseError;
    } else {
        this.parseError = Object.getPrototypeOf(this).parseError;
    }

    function popStack (n) {
        stack.length = stack.length - 2 * n;
        vstack.length = vstack.length - n;
        lstack.length = lstack.length - n;
    }


    var lex = function () {
        var token;
        token = lexer.lex() || EOF;
        // if token isn't its numeric value, convert
        if (typeof token !== 'number') {
            token = self.symbols_[token] || token;
        }
        return token;
    }

    var symbol, preErrorSymbol, state, action, a, r, yyval = {}, p, len, newState, expected;
    while (true) {
        // retreive state number from top of stack
        state = stack[stack.length - 1];

        // use default actions if available
        if (this.defaultActions[state]) {
            action = this.defaultActions[state];
        } else {
            if (symbol === null || typeof symbol == 'undefined') {
                symbol = lex();
            }
            // read action for current state and first input
            action = table[state] && table[state][symbol];
        }

_handle_error:
        // handle parse error
        if (typeof action === 'undefined' || !action.length || !action[0]) {
            var error_rule_depth;
            var errStr = '';

            // Return the rule stack depth where the nearest error rule can be found.
            // Return FALSE when no error recovery rule was found.
            function locateNearestErrorRecoveryRule(state) {
                var stack_probe = stack.length - 1;
                var depth = 0;

                // try to recover from error
                for(;;) {
                    // check for error recovery rule in this state
                    if ((TERROR.toString()) in table[state]) {
                        return depth;
                    }
                    if (state === 0 || stack_probe < 2) {
                        return false; // No suitable error recovery rule available.
                    }
                    stack_probe -= 2; // popStack(1): [symbol, action]
                    state = stack[stack_probe];
                    ++depth;
                }
            }

            if (!recovering) {
                // first see if there's any chance at hitting an error recovery rule:
                error_rule_depth = locateNearestErrorRecoveryRule(state);

                // Report error
                expected = [];
                for (p in table[state]) {
                    if (this.terminals_[p] && p > TERROR) {
                        expected.push("'"+this.terminals_[p]+"'");
                    }
                }
                if (lexer.showPosition) {
                    errStr = 'Parse error on line '+(yylineno+1)+":\n"+lexer.showPosition()+"\nExpecting "+expected.join(', ') + ", got '" + (this.terminals_[symbol] || symbol)+ "'";
                } else {
                    errStr = 'Parse error on line '+(yylineno+1)+": Unexpected " +
                                  (symbol == EOF ? "end of input" :
                                              ("'"+(this.terminals_[symbol] || symbol)+"'"));
                }
                this.parseError(errStr, {
                    text: lexer.match,
                    token: this.terminals_[symbol] || symbol,
                    line: lexer.yylineno,
                    loc: yyloc,
                    expected: expected,
                    recoverable: (error_rule_depth !== false)
                });
            } else if (preErrorSymbol !== EOF) {
                error_rule_depth = locateNearestErrorRecoveryRule(state);
            }

            // just recovered from another error
            if (recovering == 3) {
                if (symbol === EOF || preErrorSymbol === EOF) {
                    throw new Error(errStr || 'Parsing halted while starting to recover from another error.');
                }

                // discard current lookahead and grab another
                yyleng = lexer.yyleng;
                yytext = lexer.yytext;
                yylineno = lexer.yylineno;
                yyloc = lexer.yylloc;
                symbol = lex();
            }

            // try to recover from error
            if (error_rule_depth === false) {
                throw new Error(errStr || 'Parsing halted. No suitable error recovery rule available.');
            }
            popStack(error_rule_depth);

            preErrorSymbol = (symbol == TERROR ? null : symbol); // save the lookahead token
            symbol = TERROR;         // insert generic error symbol as new lookahead
            state = stack[stack.length-1];
            action = table[state] && table[state][TERROR];
            recovering = 3; // allow 3 real symbols to be shifted before reporting a new error
        }

        // this shouldn't happen, unless resolve defaults are off
        if (action[0] instanceof Array && action.length > 1) {
            throw new Error('Parse Error: multiple actions possible at state: '+state+', token: '+symbol);
        }

        switch (action[0]) {
            case 1: // shift
                //this.shiftCount++;

                stack.push(symbol);
                vstack.push(lexer.yytext);
                lstack.push(lexer.yylloc);
                stack.push(action[1]); // push state
                symbol = null;
                if (!preErrorSymbol) { // normal execution/no error
                    yyleng = lexer.yyleng;
                    yytext = lexer.yytext;
                    yylineno = lexer.yylineno;
                    yyloc = lexer.yylloc;
                    if (recovering > 0) {
                        recovering--;
                    }
                } else {
                    // error just occurred, resume old lookahead f/ before error
                    symbol = preErrorSymbol;
                    preErrorSymbol = null;
                }
                break;

            case 2:
                // reduce
                //this.reductionCount++;

                len = this.productions_[action[1]][1];

                // perform semantic action
                yyval.$ = vstack[vstack.length-len]; // default to $$ = $1
                // default location, uses first token for firsts, last for lasts
                yyval._$ = {
                    first_line: lstack[lstack.length-(len||1)].first_line,
                    last_line: lstack[lstack.length-1].last_line,
                    first_column: lstack[lstack.length-(len||1)].first_column,
                    last_column: lstack[lstack.length-1].last_column
                };
                if (ranges) {
                  yyval._$.range = [lstack[lstack.length-(len||1)].range[0], lstack[lstack.length-1].range[1]];
                }
                r = this.performAction.apply(yyval, [yytext, yyleng, yylineno, sharedState.yy, action[1], vstack, lstack].concat(args));

                if (typeof r !== 'undefined') {
                    return r;
                }

                // pop off stack
                if (len) {
                    stack = stack.slice(0,-1*len*2);
                    vstack = vstack.slice(0, -1*len);
                    lstack = lstack.slice(0, -1*len);
                }

                stack.push(this.productions_[action[1]][0]);    // push nonterminal (reduce)
                vstack.push(yyval.$);
                lstack.push(yyval._$);
                // goto new state = table[STATE][NONTERMINAL]
                newState = table[stack[stack.length-2]][stack[stack.length-1]];
                stack.push(newState);
                break;

            case 3:
                // accept
                return true;
        }

    }

    return true;
}};



    // Global Variables
    const data = Data.getInstance();
/* generated by jison-lex 0.3.4 */
var lexer = (function(){
var lexer = ({

EOF:1,

parseError:function parseError(str, hash) {
        if (this.yy.parser) {
            this.yy.parser.parseError(str, hash);
        } else {
            throw new Error(str);
        }
    },

// resets the lexer, sets new input
setInput:function (input, yy) {
        this.yy = yy || this.yy || {};
        this._input = input;
        this._more = this._backtrack = this.done = false;
        this.yylineno = this.yyleng = 0;
        this.yytext = this.matched = this.match = '';
        this.conditionStack = ['INITIAL'];
        this.yylloc = {
            first_line: 1,
            first_column: 0,
            last_line: 1,
            last_column: 0
        };
        if (this.options.ranges) {
            this.yylloc.range = [0,0];
        }
        this.offset = 0;
        return this;
    },

// consumes and returns one char from the input
input:function () {
        var ch = this._input[0];
        this.yytext += ch;
        this.yyleng++;
        this.offset++;
        this.match += ch;
        this.matched += ch;
        var lines = ch.match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno++;
            this.yylloc.last_line++;
        } else {
            this.yylloc.last_column++;
        }
        if (this.options.ranges) {
            this.yylloc.range[1]++;
        }

        this._input = this._input.slice(1);
        return ch;
    },

// unshifts one char (or a string) into the input
unput:function (ch) {
        var len = ch.length;
        var lines = ch.split(/(?:\r\n?|\n)/g);

        this._input = ch + this._input;
        this.yytext = this.yytext.substr(0, this.yytext.length - len);
        //this.yyleng -= len;
        this.offset -= len;
        var oldLines = this.match.split(/(?:\r\n?|\n)/g);
        this.match = this.match.substr(0, this.match.length - 1);
        this.matched = this.matched.substr(0, this.matched.length - 1);

        if (lines.length - 1) {
            this.yylineno -= lines.length - 1;
        }
        var r = this.yylloc.range;

        this.yylloc = {
            first_line: this.yylloc.first_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.first_column,
            last_column: lines ?
                (lines.length === oldLines.length ? this.yylloc.first_column : 0)
                 + oldLines[oldLines.length - lines.length].length - lines[0].length :
              this.yylloc.first_column - len
        };

        if (this.options.ranges) {
            this.yylloc.range = [r[0], r[0] + this.yyleng - len];
        }
        this.yyleng = this.yytext.length;
        return this;
    },

// When called from action, caches matched text and appends it on next action
more:function () {
        this._more = true;
        return this;
    },

// When called from action, signals the lexer that this rule fails to match the input, so the next matching rule (regex) should be tested instead.
reject:function () {
        if (this.options.backtrack_lexer) {
            this._backtrack = true;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. You can only invoke reject() in the lexer when the lexer is of the backtracking persuasion (options.backtrack_lexer = true).\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });

        }
        return this;
    },

// retain first n characters of the match
less:function (n) {
        this.unput(this.match.slice(n));
    },

// displays already matched input, i.e. for error messages
pastInput:function () {
        var past = this.matched.substr(0, this.matched.length - this.match.length);
        return (past.length > 20 ? '...':'') + past.substr(-20).replace(/\n/g, "");
    },

// displays upcoming input, i.e. for error messages
upcomingInput:function () {
        var next = this.match;
        if (next.length < 20) {
            next += this._input.substr(0, 20-next.length);
        }
        return (next.substr(0,20) + (next.length > 20 ? '...' : '')).replace(/\n/g, "");
    },

// displays the character position where the lexing error occurred, i.e. for error messages
showPosition:function () {
        var pre = this.pastInput();
        var c = new Array(pre.length + 1).join("-");
        return pre + this.upcomingInput() + "\n" + c + "^";
    },

// test the lexed token: return FALSE when not a match, otherwise return token
test_match:function(match, indexed_rule) {
        var token,
            lines,
            backup;

        if (this.options.backtrack_lexer) {
            // save context
            backup = {
                yylineno: this.yylineno,
                yylloc: {
                    first_line: this.yylloc.first_line,
                    last_line: this.last_line,
                    first_column: this.yylloc.first_column,
                    last_column: this.yylloc.last_column
                },
                yytext: this.yytext,
                match: this.match,
                matches: this.matches,
                matched: this.matched,
                yyleng: this.yyleng,
                offset: this.offset,
                _more: this._more,
                _input: this._input,
                yy: this.yy,
                conditionStack: this.conditionStack.slice(0),
                done: this.done
            };
            if (this.options.ranges) {
                backup.yylloc.range = this.yylloc.range.slice(0);
            }
        }

        lines = match[0].match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno += lines.length;
        }
        this.yylloc = {
            first_line: this.yylloc.last_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.last_column,
            last_column: lines ?
                         lines[lines.length - 1].length - lines[lines.length - 1].match(/\r?\n?/)[0].length :
                         this.yylloc.last_column + match[0].length
        };
        this.yytext += match[0];
        this.match += match[0];
        this.matches = match;
        this.yyleng = this.yytext.length;
        if (this.options.ranges) {
            this.yylloc.range = [this.offset, this.offset += this.yyleng];
        }
        this._more = false;
        this._backtrack = false;
        this._input = this._input.slice(match[0].length);
        this.matched += match[0];
        token = this.performAction.call(this, this.yy, this, indexed_rule, this.conditionStack[this.conditionStack.length - 1]);
        if (this.done && this._input) {
            this.done = false;
        }
        if (token) {
            return token;
        } else if (this._backtrack) {
            // recover context
            for (var k in backup) {
                this[k] = backup[k];
            }
            return false; // rule action called reject() implying the next rule should be tested instead.
        }
        return false;
    },

// return next match in input
next:function () {
        if (this.done) {
            return this.EOF;
        }
        if (!this._input) {
            this.done = true;
        }

        var token,
            match,
            tempMatch,
            index;
        if (!this._more) {
            this.yytext = '';
            this.match = '';
        }
        var rules = this._currentRules();
        for (var i = 0; i < rules.length; i++) {
            tempMatch = this._input.match(this.rules[rules[i]]);
            if (tempMatch && (!match || tempMatch[0].length > match[0].length)) {
                match = tempMatch;
                index = i;
                if (this.options.backtrack_lexer) {
                    token = this.test_match(tempMatch, rules[i]);
                    if (token !== false) {
                        return token;
                    } else if (this._backtrack) {
                        match = false;
                        continue; // rule action called reject() implying a rule MISmatch.
                    } else {
                        // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
                        return false;
                    }
                } else if (!this.options.flex) {
                    break;
                }
            }
        }
        if (match) {
            token = this.test_match(match, rules[index]);
            if (token !== false) {
                return token;
            }
            // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
            return false;
        }
        if (this._input === "") {
            return this.EOF;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. Unrecognized text.\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });
        }
    },

// return next match that has a token
lex:function lex () {
        var r = this.next();
        if (r) {
            return r;
        } else {
            return this.lex();
        }
    },

// activates a new lexer condition state (pushes the new lexer condition state onto the condition stack)
begin:function begin (condition) {
        this.conditionStack.push(condition);
    },

// pop the previously active lexer condition state off the condition stack
popState:function popState () {
        var n = this.conditionStack.length - 1;
        if (n > 0) {
            return this.conditionStack.pop();
        } else {
            return this.conditionStack[0];
        }
    },

// produce the lexer rule set which is active for the currently active lexer condition state
_currentRules:function _currentRules () {
        if (this.conditionStack.length && this.conditionStack[this.conditionStack.length - 1]) {
            return this.conditions[this.conditionStack[this.conditionStack.length - 1]].rules;
        } else {
            return this.conditions["INITIAL"].rules;
        }
    },

// return the currently active lexer condition state; when an index argument is provided it produces the N-th previous condition state, if available
topState:function topState (n) {
        n = this.conditionStack.length - 1 - Math.abs(n || 0);
        if (n >= 0) {
            return this.conditionStack[n];
        } else {
            return "INITIAL";
        }
    },

// alias for begin(condition)
pushState:function pushState (condition) {
        this.begin(condition);
    },

// return the number of states currently on the stack
stateStackSize:function stateStackSize() {
        return this.conditionStack.length;
    },
options: {"case-insensitive":true},
performAction: function anonymous(yy,yy_,$avoiding_name_collisions,YY_START) {
var YYSTATE=YY_START;
switch($avoiding_name_collisions) {
case 0:/* skip whitespace */
break;
case 1:// comment a line
break;
case 2:// comment multiple lines  
break;
case 3:data.tokens.push({Tipo: 'TK_VALUE_DATE', Valor: yy_.yytext});; return 61;
break;
case 4:yy_.yytext = yy_.yytext.substr(1, yy_.yyleng-2); return 57;
break;
case 5:data.tokens.push({Tipo: 'TK_VALUE_BOOLEAN', Valor: yy_.yytext}); return 59
break;
case 6:data.tokens.push({Tipo: 'TK_VALUE_DOUBLE', Valor: yy_.yytext}); return 60;
break;
case 7:data.tokens.push({Tipo: 'TK_VALUE_INT', Valor: yy_.yytext}); return 58;
break;
case 8:data.tokens.push({Tipo: 'ASTERISCO', Valor: yy_.yytext});return 46;
break;
case 9:data.tokens.push({Tipo: 'SLASH', Valor: yy_.yytext});return 49;
break;
case 10:data.tokens.push({Tipo: 'PUNTO_COMA', Valor: yy_.yytext});return 9;
break;
case 11:data.tokens.push({Tipo: 'DOS_PUNTOS', Valor: yy_.yytext});return ':';
break;
case 12:data.tokens.push({Tipo: 'PUNTO', Valor: yy_.yytext});return '.';
break;
case 13:data.tokens.push({Tipo: 'COMA', Valor: yy_.yytext});return 16;
break;
case 14:data.tokens.push({Tipo: 'GUION_GUION', Valor: yy_.yytext});return '--';
break;
case 15:data.tokens.push({Tipo: 'GUION', Valor: yy_.yytext});return 48;
break;
case 16:data.tokens.push({Tipo: 'MAS', Valor: yy_.yytext});return 47;
break;
case 17:data.tokens.push({Tipo: 'PORCENTAJE', Valor: yy_.yytext});return '%';
break;
case 18:data.tokens.push({Tipo: 'ELEVADO', Valor: yy_.yytext});return '^';
break;
case 19:data.tokens.push({Tipo: 'ARROBA', Valor: yy_.yytext});return 18;
break;
case 20:data.tokens.push({Tipo: 'IGUAL', Valor: yy_.yytext});return 24;
break;
case 21:data.tokens.push({Tipo: 'PARENTESIS_IZQ', Valor: yy_.yytext});return 27;
break;
case 22:data.tokens.push({Tipo: 'PARENTESIS_DER', Valor: yy_.yytext});return 29;
break;
case 23:data.tokens.push({Tipo: 'RESERVADA INT', Valor: yy_.yytext});return 63;
break;
case 24:data.tokens.push({Tipo: 'RESERVADA DOUBLE', Valor: yy_.yytext});return 64;
break;
case 25:data.tokens.push({Tipo: 'RESERVADA BOOLEAN', Valor: yy_.yytext});return 66;
break;
case 26:data.tokens.push({Tipo: 'RESERVADA VARCHAR', Valor: yy_.yytext});return 65;
break;
case 27:data.tokens.push({Tipo: 'RESERVADA DATE', Valor: yy_.yytext});return 67;
break;
case 28:data.tokens.push({Tipo: 'RESERVADA dECLARE', Valor: yy_.yytext});return 7;
break;
case 29:data.tokens.push({Tipo: 'RESERVADA DEFAULT', Valor: yy_.yytext});return 21;
break;
case 30:data.tokens.push({Tipo: 'RESERVADA SET', Valor: yy_.yytext});return 23;
break;
case 31:data.tokens.push({Tipo: 'RESERVADA ALTER', Valor: yy_.yytext});return 31;
break;
case 32:data.tokens.push({Tipo: 'RESERVADA ADD', Valor: yy_.yytext});return 33;
break;
case 33:data.tokens.push({Tipo: 'RESERVADA DROP', Valor: yy_.yytext});return 34;
break;
case 34:data.tokens.push({Tipo: 'RESERVADA RENAME', Valor: yy_.yytext});return 36;
break;
case 35:data.tokens.push({Tipo: 'RESERVADA TO', Valor: yy_.yytext});return 37;
break;
case 36:data.tokens.push({Tipo: 'RESERVADA PRINT', Valor: yy_.yytext});return 'PRINT';
break;
case 37:data.tokens.push({Tipo: 'RESERVADA BEGIN', Valor: yy_.yytext});return 'BEGIN';
break;
case 38:data.tokens.push({Tipo: 'RESERVADA END', Valor: yy_.yytext});return 'END';
break;
case 39:data.tokens.push({Tipo: 'RESERVADA CREATE', Valor: yy_.yytext});return 25;
break;
case 40:data.tokens.push({Tipo: 'RESERVADA TABLE', Valor: yy_.yytext});return 26;
break;
case 41:data.tokens.push({Tipo: 'RESERVADA FUNCTION', Valor: yy_.yytext});return 'FUNCTION';
break;
case 42:data.tokens.push({Tipo: 'RESERVADA RETURNS', Valor: yy_.yytext});return 'RETURNS';
break;
case 43:data.tokens.push({Tipo: 'RESERVADA SELECT', Valor: yy_.yytext});return 43;
break;
case 44:data.tokens.push({Tipo: 'RESERVADA LOWER', Valor: yy_.yytext});return 'LOWER';
break;
case 45:data.tokens.push({Tipo: 'RESERVADA UPPER', Valor: yy_.yytext});return 'UPPER';
break;
case 46:data.tokens.push({Tipo: 'RESERVADA ROUND', Valor: yy_.yytext});return 'ROUND';
break;
case 47:data.tokens.push({Tipo: 'RESERVADA INSERT', Valor: yy_.yytext});return 38;
break;
case 48:data.tokens.push({Tipo: 'RESERVADA INTO', Valor: yy_.yytext});return 39;
break;
case 49:data.tokens.push({Tipo: 'RESERVADA VALUES', Valor: yy_.yytext});return 41;
break;
case 50:data.tokens.push({Tipo: 'RESERVADA FROM', Valor: yy_.yytext});return 45;
break;
case 51:data.tokens.push({Tipo: 'TK_IDENTIFIER', Valor: yy_.yytext});return 19;
break;
case 52:return 5;
break;
case 53:
    data.errores.push({ line: yy_.yylloc.first_line, column: yy_.yylloc.first_column+1, type: 'Lexico', message: `Error l칠xico, caracter '${yy_.yytext}' no esperado.`});
    console.log({ line: yy_.yylloc.first_line, column: yy_.yylloc.first_column+1, type: 'Lexico', message: `Error l칠xico, caracter '${yy_.yytext}' no esperado.`});
        
break;
}
},
rules: [/^(?:\s+)/i,/^(?:--.*)/i,/^(?:[/][*][^*]*[*]+([^/*][^*]*[*]+)*[/])/i,/^(?:(\d{4})-(\d{1,2})-(\d{1,2}))/i,/^(?:("(\\.|[^\\"])*"))/i,/^(?:(true|false\b))/i,/^(?:([0-9]+)\.([0-9]+))/i,/^(?:[0-9]+)/i,/^(?:\*)/i,/^(?:\/)/i,/^(?:;)/i,/^(?::)/i,/^(?:\.)/i,/^(?:,)/i,/^(?:--)/i,/^(?:-)/i,/^(?:\+)/i,/^(?:%)/i,/^(?:\^)/i,/^(?:@)/i,/^(?:=)/i,/^(?:\()/i,/^(?:\))/i,/^(?:int\b)/i,/^(?:double\b)/i,/^(?:boolean\b)/i,/^(?:varchar\b)/i,/^(?:date\b)/i,/^(?:declare\b)/i,/^(?:default\b)/i,/^(?:set\b)/i,/^(?:alter\b)/i,/^(?:add\b)/i,/^(?:drop\b)/i,/^(?:rename\b)/i,/^(?:to\b)/i,/^(?:print\b)/i,/^(?:begin\b)/i,/^(?:end\b)/i,/^(?:create\b)/i,/^(?:table\b)/i,/^(?:function\b)/i,/^(?:returns\b)/i,/^(?:select\b)/i,/^(?:lower\b)/i,/^(?:upper\b)/i,/^(?:round\b)/i,/^(?:insert\b)/i,/^(?:into\b)/i,/^(?:values\b)/i,/^(?:from\b)/i,/^(?:([a-zA-Z_])[a-zA-Z0-9_침칌]*)/i,/^(?:$)/i,/^(?:.)/i],
conditions: {"INITIAL":{"rules":[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53],"inclusive":true}}
});
return lexer;
})();
parser.lexer = lexer;
function Parser () {
  this.yy = {};
}
Parser.prototype = parser;parser.Parser = Parser;
return new Parser;
})();


if (typeof require !== 'undefined' && typeof exports !== 'undefined') {
exports.parser = grammar;
exports.Parser = grammar.Parser;
exports.parse = function () { return grammar.parse.apply(grammar, arguments); };
exports.main = function commonjsMain (args) {
    if (!args[1]) {
        console.log('Usage: '+args[0]+' FILE');
        process.exit(1);
    }
    var source = require('fs').readFileSync(require('path').normalize(args[1]), "utf8");
    return exports.parser.parse(source);
};
if (typeof module !== 'undefined' && require.main === module) {
  exports.main(process.argv.slice(1));
}
}